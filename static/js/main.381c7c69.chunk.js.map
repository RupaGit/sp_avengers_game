{"version":3,"sources":["components/avengers/Avenger.js","components/Wrapper/index.js","components/Title/index.js","components/SubTitle/index.js","components/avengers/AvengerList.js","App.js","serviceWorker.js","index.js"],"names":["Avenger","props","avengerSelected","bind","state","isActive","event","avengerState","preventDefault","console","log","this","shuffleAvengers","userLost","setState","className","alt","name","src","image","onClick","Component","Wrapper","children","Title","SubTitle","AvengerList","avengers","correctGuesses","winStatus","record","recordWins","length","avengersToShuffle","i","j","Math","floor","random","temp","correct","avenges","map","avenger","id","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"27CA0CeA,G,wDAtCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBACvB,EAAKC,MAAQ,CACXC,UAAU,GAJK,E,4DAQHC,GAGd,IAAIC,EAFJD,EAAME,iBACNC,QAAQC,IAAI,oBAAqBC,KAAKP,MAAMC,UAFvB,IAIbO,EAAoBD,KAAKV,MAAzBW,gBACAC,EAAaF,KAAKV,MAAlBY,UACoB,IAAxBF,KAAKP,MAAMC,SACbQ,KAEAN,GAAe,EACfK,KAEFD,KAAKG,SAAS,CACZT,SAAUE,M,+BAKZ,OACE,yBAAKQ,UAAU,QACb,yBACEC,IAAKL,KAAKV,MAAMgB,KAChBC,IAAKP,KAAKV,MAAMkB,MAChBC,QAAST,KAAKT,uB,GAhCFmB,c,MCIPC,MAJf,SAAiBrB,GACf,OAAO,yBAAKc,UAAU,WAAWd,EAAMsB,W,MCG1BC,MAJf,SAAevB,GACb,OAAO,wBAAIc,UAAU,SAASd,EAAMsB,W,MCGvBE,MAJf,SAAkBxB,GAChB,OAAO,wBAAIc,UAAU,YAAYd,EAAMsB,W,OC8E1BG,E,4MAzEbtB,MAAQ,CACNuB,WACAC,eAAgB,EAChBC,WAAW,EACXC,OAAQ,G,EAOVjB,SAAW,WACT,IAAIkB,EAEFA,EADE,EAAK3B,MAAMwB,eAAiB,EAAKxB,MAAM0B,OAC5B,EAAK1B,MAAMwB,eAEX,EAAKxB,MAAM0B,OAE1B,EAAKhB,SAAS,CACZe,WAAW,EACXD,eAAgB,EAChBE,OAAQC,K,EAIZnB,gBAAkB,WAChBH,QAAQC,IAAI,qBAAsB,EAAKN,MAAMuB,SAASK,QAEtD,IADA,IAAIC,EAAoB,EAAK7B,MAAMuB,SAC1BO,EAAID,EAAkBD,OAAS,EAAGE,EAAI,EAAGA,IAAK,CACrD,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCK,EAAON,EAAkBC,GAC7BD,EAAkBC,GAAKD,EAAkBE,GACzCF,EAAkBE,GAAKI,EAEzB9B,QAAQC,IAAIuB,GACZ,IAAIO,EAAU,EAAKpC,MAAMwB,eAAiB,EAC1C,EAAKd,SAAS,CACZ2B,QAASR,EACTL,eAAgBY,EAChBX,WAAW,K,uDAKL,IAAD,OAEP,OADApB,QAAQC,IAAIC,KAAKP,MAAMuB,UAErB,kBAAC,EAAD,KACE,kBAAC,EAAD,sBACA,kBAAC,EAAD,+BAAkChB,KAAKP,MAAMwB,eAA7C,KACCjB,KAAKP,MAAMyB,UACV,kBAAC,EAAD,kBAEA,kBAAC,EAAD,qCAEF,kBAAC,EAAD,yBAA4BlB,KAAKP,MAAM0B,OAAvC,KAECnB,KAAKP,MAAMuB,SAASe,KAAI,SAAAC,GAAO,OAC9B,kBAAC,EAAD,CACEC,GAAID,EAAQC,GACZC,IAAKF,EAAQC,GACb3B,KAAM0B,EAAQ1B,KACdE,MAAOwB,EAAQxB,MACfd,SAAUsC,EAAQtC,SAClBO,gBAAiB,EAAKA,gBACtBC,SAAU,EAAKA,mB,GAnEDQ,aCOXyB,E,uKARX,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,W,GALUM,aCSE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.381c7c69.chunk.js","sourcesContent":["import React, { Component } from \"../../../node_modules/react\";\r\nimport \"./style.css\";\r\n\r\nclass Avenger extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.avengerSelected = this.avengerSelected.bind(this);\r\n    this.state = {\r\n      isActive: false\r\n    };\r\n  }\r\n\r\n  avengerSelected(event) {\r\n    event.preventDefault();\r\n    console.log(\"Avenger state is \", this.state.isActive);\r\n    var avengerState;\r\n    const { shuffleAvengers } = this.props;\r\n    const { userLost } = this.props;\r\n    if (this.state.isActive === true) {\r\n      userLost();\r\n    } else {\r\n      avengerState = true;\r\n      shuffleAvengers();\r\n    }\r\n    this.setState({\r\n      isActive: avengerState\r\n    });\r\n  }\r\n  render() {\r\n    // console.log(\"Avenger state is \", this.state.isActive);\r\n    return (\r\n      <div className=\"card\">\r\n        <img\r\n          alt={this.props.name}\r\n          src={this.props.image}\r\n          onClick={this.avengerSelected}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Avenger;\r\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction SubTitle(props) {\n  return <h3 className=\"subtitle\">{props.children}</h3>;\n}\n\nexport default SubTitle;\n","import React, { Component } from \"../../../node_modules/react\";\r\nimport Avenger from \"./Avenger\";\r\nimport Wrapper from \"../Wrapper\";\r\nimport Title from \"../Title\";\r\nimport SubTitle from \"../SubTitle\";\r\nimport avengers from \"../../avengers.json\";\r\n\r\nclass AvengerList extends Component {\r\n  // Setting this.state.friends to the friends json array\r\n  state = {\r\n    avengers,\r\n    correctGuesses: 0,\r\n    winStatus: false,\r\n    record: 0\r\n  };\r\n\r\n  // state = {\r\n  //   active: \"false\"\r\n  // };\r\n\r\n  userLost = () => {\r\n    var recordWins;\r\n    if (this.state.correctGuesses > this.state.record) {\r\n      recordWins = this.state.correctGuesses;\r\n    } else {\r\n      recordWins = this.state.record;\r\n    }\r\n    this.setState({\r\n      winStatus: false,\r\n      correctGuesses: 0,\r\n      record: recordWins\r\n    });\r\n  };\r\n\r\n  shuffleAvengers = () => {\r\n    console.log(\"no of avengers are\", this.state.avengers.length);\r\n    var avengersToShuffle = this.state.avengers;\r\n    for (var i = avengersToShuffle.length - 1; i > 0; i--) {\r\n      var j = Math.floor(Math.random() * (i + 1));\r\n      var temp = avengersToShuffle[i];\r\n      avengersToShuffle[i] = avengersToShuffle[j];\r\n      avengersToShuffle[j] = temp;\r\n    }\r\n    console.log(avengersToShuffle);\r\n    var correct = this.state.correctGuesses + 1;\r\n    this.setState({\r\n      avenges: avengersToShuffle,\r\n      correctGuesses: correct,\r\n      winStatus: true\r\n    });\r\n  };\r\n\r\n  // Map over this.state.friends and render a FriendCard component for each friend object\r\n  render() {\r\n    console.log(this.state.avengers);\r\n    return (\r\n      <Wrapper>\r\n        <Title>Avengers List</Title>\r\n        <SubTitle>No.of Correct guesses: {this.state.correctGuesses} </SubTitle>\r\n        {this.state.winStatus ? (\r\n          <SubTitle>Well done</SubTitle>\r\n        ) : (\r\n          <SubTitle>Press an image to play again</SubTitle>\r\n        )}\r\n        <SubTitle>Personal Record: {this.state.record} </SubTitle>\r\n\r\n        {this.state.avengers.map(avenger => (\r\n          <Avenger\r\n            id={avenger.id}\r\n            key={avenger.id}\r\n            name={avenger.name}\r\n            image={avenger.image}\r\n            isActive={avenger.isActive}\r\n            shuffleAvengers={this.shuffleAvengers}\r\n            userLost={this.userLost}\r\n          />\r\n        ))}\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AvengerList;\r\n","import React, { Component } from \"react\";\nimport AvengerList from \"./components/avengers/AvengerList\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  render() {\n    return (\n      <div className=\"App\">\n        <AvengerList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}